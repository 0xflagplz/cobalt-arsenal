#
# Simple Beacon console status bar enhancement showing Beacon's last known current
# working directory path, as well as adding fixed-width to last-seen meter. 
#
# Additionally, this script enhances 'cd' command to make it restore previous path 
# if "cd -" was issued (and previous path is known).
#
# Author:
#   Mariusz B. / mgeeky, '20
#   <mb [at] binary-offensive.com>
#   (https://github.com/mgeeky)
#

global('%OPERATING_BEACONS');
%OPERATING_BEACONS = %();

beacon_command_register(
    "cd",
    "Change directory on host. Use '-' to get back to previous cwd.",
    "Use: cd [directory]\n\nChange directory on host. Use '-' to get back to previous cwd.");

set BEACON_SBAR_LEFT { 
    local('$hostname $username $pid $arch $pwd');
    $hostname = $2["computer"];
    $username = $2["user"];
    $pid = $2["pid"];
    $arch = $2["arch"];
    $pwd = %OPERATING_BEACONS[$1]['pwd'];

    return "[\c2 $+ $hostname $+ \o] $username $+ / $+ $pid \cE( $+ $arch $+ )\o\c2 $pwd \o";
}

set BEACON_SBAR_RIGHT { 
    local('$note $last');
    $note = $2["note"];
    $last = $2["lastf"];

    return "\c6 $note \cE(last: $+ $[5]last $+ )\o";
}

on beacon_tasked {
    local('$pwd $sep');

    if('cd *' iswm $2) {
        $pwd = substr($2, strlen("cd "));
        $sep = iff(binfo($1, "os") eq "Windows", "\\", "/");

        if($pwd eq "..") {
            $pwd = substr(%OPERATING_BEACONS[$1]['pwd'], 0, lindexOf(%OPERATING_BEACONS[$1]['pwd'], $sep));
            
            if($pwd eq "..") {
                return "\cC[*]\o $2";
            }
        }
        else if($pwd eq ".") {
            return "\cC[*]\o $2";
        }
        else if((strlen($pwd) >= 2) && (charAt($pwd, 1) ne ":")) {
            # relative path?
            $pwd = %OPERATING_BEACONS[$1]['pwd'] . $sep . $pwd;
        }

        %OPERATING_BEACONS[$1]['prev-pwd'] = %OPERATING_BEACONS[$1]['pwd'];
        %OPERATING_BEACONS[$1]['pwd'] = $pwd;

        return "\cC[*]\o $2";
    }
}

set BEACON_OUTPUT_ALT {
    local('$pwd');

    if($2 ismatch 'Current directory is (.+)') {
        $pwd = matched()[0];
        %OPERATING_BEACONS[$1]['prev-pwd'] = %OPERATING_BEACONS[$1]['pwd'];
        %OPERATING_BEACONS[$1]['pwd'] = $pwd;
        return "\cC[*]\o Current directory is \cC" . $pwd . "\o\n";
    }

    return "\cC[*]\o $2\n";
}

on beacon_output_ls {
    local('$pwd');
    $pwd = split("\n", ["$2" trim])[0];
    if(right($pwd, 2) eq "\\*") {
        $pwd = substr($pwd, 0, -2);
    }
    %OPERATING_BEACONS[$1]['prev-pwd'] = %OPERATING_BEACONS[$1]['pwd'];
    %OPERATING_BEACONS[$1]['pwd'] = $pwd;
}

on beacons {
	if(%OPERATING_BEACONS is $null) {
        %OPERATING_BEACONS = %();
    }

	foreach $b ($1) {
		if(iff($b in keys(%OPERATING_BEACONS), "true", $null)) {
			%OPERATING_BEACONS[$b] = %();
		}
	}
}

alias cd {
    if(($2 eq "-") && (strlen(%OPERATING_BEACONS[$1]['prev-pwd']) > 0)) {
        bcd($1, %OPERATING_BEACONS[$1]['prev-pwd']);
        return;
    }

    bcd($1, $2);
}
